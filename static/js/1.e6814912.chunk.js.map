{"version":3,"file":"static/js/1.e6814912.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Container/Container.styled.jsx","components/Container/Container.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","pages/contacts/Contacts.js"],"sourcesContent":["export const getContactsValue = state => state.persons.items;\r\nexport const getIsLoading = state => state.persons.isLoading;\r\nexport const getError = state => state.persons.error;\r\n\r\nexport const getFilterContactsValue = state => state.filterContacts.value;\r\n","import styled from 'styled-components';\r\n\r\nexport const ContainerTitle = styled.h1``;\r\n\r\nexport const ContainerBox = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 400px;\r\n  /* border: 1px solid black; */\r\n  /* padding-left: 20px; */\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { ContainerBox, ContainerTitle } from './Container.styled';\r\n\r\nexport const Container = ({ children }) => {\r\n  return (\r\n    <ContainerBox>\r\n      <ContainerTitle>Phonebook</ContainerTitle>\r\n      {children}\r\n    </ContainerBox>\r\n  );\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Input = styled.input`\r\n  margin-bottom: 20px;\r\n  margin-top: 5px;\r\n`;\r\n\r\nexport const Btn = styled.button`\r\n  width: 100px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  padding: 10px;\r\n  border: 1px solid black;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`;\r\n","import { useState } from 'react';\r\nimport { Input, Btn, Label, Form } from './ContactForm.styled';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContactsValue } from 'redux/contacts/selectors';\r\nimport { addContact } from 'redux/contacts/operations';\r\n\r\nexport function ContactForm() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const contacts = useSelector(getContactsValue);\r\n\r\n  const handleChange = evt => {\r\n    const { name, value } = evt.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const formSubmitHandler = dataHandle => {\r\n    const { name } = dataHandle;\r\n\r\n    const contactFind = contacts.find(contact => contact.name === name);\r\n    if (contactFind) {\r\n      alert(`${contactFind.name} is already in contacts!`);\r\n      return true;\r\n    }\r\n\r\n    dispatch(addContact({ name, number }));\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n    if (formSubmitHandler({ name, number })) {\r\n      return;\r\n    }\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Label>\r\n        Name\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </Label>\r\n      <Label>\r\n        Number\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </Label>\r\n      <Btn type=\"submit\">Add contact</Btn>\r\n    </Form>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\n// export const ContactItems = styled.ul``;\r\n\r\nexport const ContactItem = styled.li`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const Btn = styled.button`\r\n  margin-left: 20px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { ContactItem, Span, Btn } from './ContactItem.styled';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from 'redux/contacts/operations';\r\n\r\nexport const ContactsItem = ({ name, number, id }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onDelete = contactId => {\r\n    dispatch(deleteContact(contactId));\r\n  };\r\n\r\n  return (\r\n    <ContactItem>\r\n      {name}: <Span>{number}</Span>\r\n      <Btn type=\"button\" onClick={() => onDelete(id)}>\r\n        Delete\r\n      </Btn>\r\n    </ContactItem>\r\n  );\r\n};\r\n\r\nContactsItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Input = styled.input`\r\n  margin-bottom: 5px;\r\n  margin-top: 5px;\r\n`;\r\n\r\nexport const P = styled.p`\r\n  margin-bottom: 5px;\r\n  margin-top: 5px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`;\r\n","import { Label, Input, P } from './Filter.styled';\r\n\r\nimport { showContacts } from 'redux/contacts/filterSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport const Filter = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onFilterHandler = evt => {\r\n    const { value } = evt.currentTarget;\r\n    dispatch(showContacts(value));\r\n  };\r\n  return (\r\n    <Label>\r\n      <P>Find contacts by name</P>\r\n      <Input type=\"text\" name=\"filter\" onChange={onFilterHandler} />\r\n    </Label>\r\n  );\r\n};\r\n\r\n// import { getFilterContactsValue } from 'redux/selectors';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// const filterContactsState = useSelector(getFilterContactsValue);\r\n// value={filterContactsState}\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactItems = styled.ul``;\r\n\r\nexport const ContactsListTitle = styled.h2``;\r\n\r\nexport const ContactsListBox = styled.div``;\r\n","import { ContactsItem } from 'components/ContactItem/ContactItem';\r\nimport { Filter } from 'components/Filter/Filter';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  getFilterContactsValue,\r\n  getContactsValue,\r\n  getIsLoading,\r\n  getError,\r\n} from 'redux/contacts/selectors';\r\n\r\nimport { fetchContacts } from 'redux/contacts/operations';\r\n\r\nimport {\r\n  ContactsListBox,\r\n  ContactsListTitle,\r\n  ContactItems,\r\n} from './ContactsList.styled';\r\n\r\nexport const ContactsListWrapper = () => {\r\n  const contacts = useSelector(getContactsValue);\r\n  const filterContactsState = useSelector(getFilterContactsValue);\r\n\r\n  const isLoading = useSelector(getIsLoading);\r\n  const error = useSelector(getError);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const onFilterContacts = () => {\r\n    // if (filterContactsState) {\r\n    const normFilter = filterContactsState.toLowerCase();\r\n    return contacts.filter(contactEl =>\r\n      contactEl.name.toLowerCase().includes(normFilter)\r\n    );\r\n    // }\r\n  };\r\n\r\n  // const onDataContacts = () => {\r\n  //   if (filterContactsState) {\r\n  //     return onFilterContacts();\r\n  //   }\r\n  //   return contacts;\r\n  // };\r\n\r\n  return (\r\n    <ContactsListBox>\r\n      <ContactsListTitle>Contacts</ContactsListTitle>\r\n      <Filter />\r\n      {isLoading && !error && <b>Request in progress...</b>}\r\n      <ContactItems>\r\n        {/* {onDataContacts().map(({ name, phone, id }) => ( */}\r\n        {onFilterContacts().map(({ name, number, id }) => (\r\n          <ContactsItem\r\n            key={id}\r\n            id={id}\r\n            name={name}\r\n            number={number}\r\n          ></ContactsItem>\r\n        ))}\r\n      </ContactItems>\r\n    </ContactsListBox>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\n// import { TaskList } from 'components/TaskList/TaskList';\r\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\r\nimport { fetchContacts } from 'redux/contacts/operations';\r\nimport { getIsLoading } from 'redux/contacts/selectors';\r\nimport { Container } from 'components/Container/Container';\r\nimport { ContactForm } from 'components/ContactForm/ContactForm';\r\nimport { ContactsListWrapper } from 'components/ContactsList/ContactsList';\r\n\r\nexport default function ContactsPage() {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(getIsLoading);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Your contacts</title>\r\n      </Helmet>\r\n      <Container>\r\n        <ContactForm />\r\n        <div>{isLoading && 'Request in progress...'}</div>\r\n        <ContactsListWrapper />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n/* <Container>\r\n  <ContactForm />\r\n  <ContactsListWrapper></ContactsListWrapper>\r\n</Container>; */\r\n\r\n//   <Helmet>\r\n//     <title>Your contacts</title>\r\n//   </Helmet>\r\n//   <TaskEditor />\r\n//   <div>{isLoading && 'Request in progress...'}</div>\r\n//   <TaskList />\r\n"],"names":["getContactsValue","state","persons","items","getIsLoading","isLoading","getError","error","getFilterContactsValue","filterContacts","value","ContainerTitle","styled","ContainerBox","Container","children","Input","Btn","Form","Label","ContactForm","dispatch","useDispatch","useState","name","setName","number","setNumber","contacts","useSelector","handleChange","evt","currentTarget","reset","onSubmit","preventDefault","dataHandle","contactFind","find","contact","alert","addContact","formSubmitHandler","type","pattern","title","onChange","required","ContactItem","Span","ContactsItem","id","onClick","contactId","deleteContact","P","Filter","showContacts","ContactItems","ContactsListTitle","ContactsListBox","ContactsListWrapper","filterContactsState","useEffect","fetchContacts","normFilter","toLowerCase","filter","contactEl","includes","onFilterContacts","map","ContactsPage","Helmet"],"sourceRoot":""}